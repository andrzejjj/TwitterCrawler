// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.edu.agh.toik.twittercrawler.web;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;
import pl.edu.agh.toik.twittercrawler.model.Tag;
import pl.edu.agh.toik.twittercrawler.repo.TagRepository;
import pl.edu.agh.toik.twittercrawler.web.EntryBean;
import pl.edu.agh.toik.twittercrawler.web.util.MessageFactory;

privileged aspect EntryBean_Roo_ManagedBean {
    
    declare @type: EntryBean: @ManagedBean(name = "entryBean");
    
    declare @type: EntryBean: @SessionScoped;
    
    @Autowired
    TagRepository EntryBean.tagRepository;
    
    private String EntryBean.name = "Tags";
    
    private Tag EntryBean.tag;
    
    private List<Tag> EntryBean.allTags;
    
    private boolean EntryBean.dataVisible = false;
    
    private List<String> EntryBean.columns;
    
    private HtmlPanelGrid EntryBean.createPanelGrid;
    
    private HtmlPanelGrid EntryBean.editPanelGrid;
    
    private HtmlPanelGrid EntryBean.viewPanelGrid;
    
    private boolean EntryBean.createDialogVisible = false;
    
    @PostConstruct
    public void EntryBean.init() {
        columns = new ArrayList<String>();
        columns.add("author");
        columns.add("content");
    }
    
    public String EntryBean.getName() {
        return name;
    }
    
    public List<String> EntryBean.getColumns() {
        return columns;
    }
    
    public List<Tag> EntryBean.getAllTags() {
        return allTags;
    }
    
    public void EntryBean.setAllTags(List<Tag> allTags) {
        this.allTags = allTags;
    }
    
    public String EntryBean.findAllTags() {
        allTags = tagRepository.findAll();
        dataVisible = !allTags.isEmpty();
        return null;
    }
    
    public boolean EntryBean.isDataVisible() {
        return dataVisible;
    }
    
    public void EntryBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid EntryBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void EntryBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid EntryBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void EntryBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid EntryBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void EntryBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid EntryBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel authorCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        authorCreateOutput.setFor("authorCreateInput");
        authorCreateOutput.setId("authorCreateOutput");
        authorCreateOutput.setValue("Author:");
        htmlPanelGrid.getChildren().add(authorCreateOutput);
        
        InputText authorCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        authorCreateInput.setId("authorCreateInput");
        authorCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{entryBean.tag.author}", String.class));
        authorCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(authorCreateInput);
        
        Message authorCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        authorCreateInputMessage.setId("authorCreateInputMessage");
        authorCreateInputMessage.setFor("authorCreateInput");
        authorCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(authorCreateInputMessage);
        
        OutputLabel contentCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contentCreateOutput.setFor("contentCreateInput");
        contentCreateOutput.setId("contentCreateOutput");
        contentCreateOutput.setValue("Content:");
        htmlPanelGrid.getChildren().add(contentCreateOutput);
        
        InputText contentCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        contentCreateInput.setId("contentCreateInput");
        contentCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{entryBean.tag.content}", String.class));
        contentCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(contentCreateInput);
        
        Message contentCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contentCreateInputMessage.setId("contentCreateInputMessage");
        contentCreateInputMessage.setFor("contentCreateInput");
        contentCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contentCreateInputMessage);
        
        OutputLabel tweetsCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tweetsCreateOutput.setFor("tweetsCreateInput");
        tweetsCreateOutput.setId("tweetsCreateOutput");
        tweetsCreateOutput.setValue("Tweets:");
        htmlPanelGrid.getChildren().add(tweetsCreateOutput);
        
        InputText tweetsCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tweetsCreateInput.setId("tweetsCreateInput");
        tweetsCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{entryBean.tag.tweets}", Set.class));
        tweetsCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tweetsCreateInput);
        
        Message tweetsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tweetsCreateInputMessage.setId("tweetsCreateInputMessage");
        tweetsCreateInputMessage.setFor("tweetsCreateInput");
        tweetsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tweetsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid EntryBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel authorEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        authorEditOutput.setFor("authorEditInput");
        authorEditOutput.setId("authorEditOutput");
        authorEditOutput.setValue("Author:");
        htmlPanelGrid.getChildren().add(authorEditOutput);
        
        InputText authorEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        authorEditInput.setId("authorEditInput");
        authorEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{entryBean.tag.author}", String.class));
        authorEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(authorEditInput);
        
        Message authorEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        authorEditInputMessage.setId("authorEditInputMessage");
        authorEditInputMessage.setFor("authorEditInput");
        authorEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(authorEditInputMessage);
        
        OutputLabel contentEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contentEditOutput.setFor("contentEditInput");
        contentEditOutput.setId("contentEditOutput");
        contentEditOutput.setValue("Content:");
        htmlPanelGrid.getChildren().add(contentEditOutput);
        
        InputText contentEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        contentEditInput.setId("contentEditInput");
        contentEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{entryBean.tag.content}", String.class));
        contentEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(contentEditInput);
        
        Message contentEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contentEditInputMessage.setId("contentEditInputMessage");
        contentEditInputMessage.setFor("contentEditInput");
        contentEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contentEditInputMessage);
        
        OutputLabel tweetsEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tweetsEditOutput.setFor("tweetsEditInput");
        tweetsEditOutput.setId("tweetsEditOutput");
        tweetsEditOutput.setValue("Tweets:");
        htmlPanelGrid.getChildren().add(tweetsEditOutput);
        
        InputText tweetsEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tweetsEditInput.setId("tweetsEditInput");
        tweetsEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{entryBean.tag.tweets}", Set.class));
        tweetsEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tweetsEditInput);
        
        Message tweetsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tweetsEditInputMessage.setId("tweetsEditInputMessage");
        tweetsEditInputMessage.setFor("tweetsEditInput");
        tweetsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tweetsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid EntryBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText authorLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        authorLabel.setId("authorLabel");
        authorLabel.setValue("Author:");
        htmlPanelGrid.getChildren().add(authorLabel);
        
        HtmlOutputText authorValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        authorValue.setId("authorValue");
        authorValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{entryBean.tag.author}", String.class));
        htmlPanelGrid.getChildren().add(authorValue);
        
        HtmlOutputText contentLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contentLabel.setId("contentLabel");
        contentLabel.setValue("Content:");
        htmlPanelGrid.getChildren().add(contentLabel);
        
        HtmlOutputText contentValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contentValue.setId("contentValue");
        contentValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{entryBean.tag.content}", String.class));
        htmlPanelGrid.getChildren().add(contentValue);
        
        HtmlOutputText tweetsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tweetsLabel.setId("tweetsLabel");
        tweetsLabel.setValue("Tweets:");
        htmlPanelGrid.getChildren().add(tweetsLabel);
        
        HtmlOutputText tweetsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tweetsValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{entryBean.tag.tweets}", String.class));
        htmlPanelGrid.getChildren().add(tweetsValue);
        
        return htmlPanelGrid;
    }
    
    public Tag EntryBean.getTag() {
        if (tag == null) {
            tag = new Tag();
        }
        return tag;
    }
    
    public void EntryBean.setTag(Tag tag) {
        this.tag = tag;
    }
    
    public String EntryBean.onEdit() {
        return null;
    }
    
    public boolean EntryBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void EntryBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String EntryBean.displayList() {
        createDialogVisible = false;
        findAllTags();
        return "tag";
    }
    
    public String EntryBean.displayCreateDialog() {
        tag = new Tag();
        createDialogVisible = true;
        return "tag";
    }
    
    public String EntryBean.persist() {
        String message = "";
        if (tag.getId() != null) {
            tagRepository.save(tag);
            message = "message_successfully_updated";
        } else {
            tagRepository.save(tag);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Tag");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTags();
    }
    
    public String EntryBean.delete() {
        tagRepository.delete(tag);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Tag");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTags();
    }
    
    public void EntryBean.reset() {
        tag = null;
        createDialogVisible = false;
    }
    
    public void EntryBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
